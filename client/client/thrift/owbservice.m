/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"

#import "owbop.h"
#import "owbsys.h"

#import "owbservice.h"


@implementation owbowbserviceConstants
+ (void) initialize {
}
@end

@interface owbGetOps_args : NSObject <NSCoding> {
  NSString * __mid;
  int32_t __opid;

  BOOL __mid_isset;
  BOOL __opid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=mid, setter=setMid:) NSString * mid;
@property (nonatomic, getter=opid, setter=setOpid:) int32_t opid;
#endif

- (id) init;
- (id) initWithMid: (NSString *) mid opid: (int32_t) opid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) mid;
- (void) setMid: (NSString *) mid;
#endif
- (BOOL) midIsSet;

#if !__has_feature(objc_arc)
- (int32_t) opid;
- (void) setOpid: (int32_t) opid;
#endif
- (BOOL) opidIsSet;

@end

@implementation owbGetOps_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMid: (NSString *) mid opid: (int32_t) opid
{
  self = [super init];
  __mid = [mid retain_stub];
  __mid_isset = YES;
  __opid = opid;
  __opid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mid"])
  {
    __mid = [[decoder decodeObjectForKey: @"mid"] retain_stub];
    __mid_isset = YES;
  }
  if ([decoder containsValueForKey: @"opid"])
  {
    __opid = [decoder decodeInt32ForKey: @"opid"];
    __opid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mid_isset)
  {
    [encoder encodeObject: __mid forKey: @"mid"];
  }
  if (__opid_isset)
  {
    [encoder encodeInt32: __opid forKey: @"opid"];
  }
}

- (void) dealloc
{
  [__mid release_stub];
  [super dealloc_stub];
}

- (NSString *) mid {
  return [[__mid retain_stub] autorelease_stub];
}

- (void) setMid: (NSString *) mid {
  [mid retain_stub];
  [__mid release_stub];
  __mid = mid;
  __mid_isset = YES;
}

- (BOOL) midIsSet {
  return __mid_isset;
}

- (void) unsetMid {
  [__mid release_stub];
  __mid = nil;
  __mid_isset = NO;
}

- (int32_t) opid {
  return __opid;
}

- (void) setOpid: (int32_t) opid {
  __opid = opid;
  __opid_isset = YES;
}

- (BOOL) opidIsSet {
  return __opid_isset;
}

- (void) unsetOpid {
  __opid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOpid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetOps_args"];
  if (__mid_isset) {
    if (__mid != nil) {
      [outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __mid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__opid_isset) {
    [outProtocol writeFieldBeginWithName: @"opid" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __opid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetOps_args("];
  [ms appendString: @"mid:"];
  [ms appendFormat: @"\"%@\"", __mid];
  [ms appendString: @",opid:"];
  [ms appendFormat: @"%i", __opid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface owbGetOps_result : NSObject <NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation owbGetOps_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            owbOwbOp *_elem2 = [[owbOwbOp alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetOps_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i4;
        for (i4 = 0; i4 < [__success count]; i4++)
        {
          [[__success objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetOps_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface owbRestore_args : NSObject <NSCoding> {
  NSString * __mid;

  BOOL __mid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=mid, setter=setMid:) NSString * mid;
#endif

- (id) init;
- (id) initWithMid: (NSString *) mid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) mid;
- (void) setMid: (NSString *) mid;
#endif
- (BOOL) midIsSet;

@end

@implementation owbRestore_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMid: (NSString *) mid
{
  self = [super init];
  __mid = [mid retain_stub];
  __mid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mid"])
  {
    __mid = [[decoder decodeObjectForKey: @"mid"] retain_stub];
    __mid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mid_isset)
  {
    [encoder encodeObject: __mid forKey: @"mid"];
  }
}

- (void) dealloc
{
  [__mid release_stub];
  [super dealloc_stub];
}

- (NSString *) mid {
  return [[__mid retain_stub] autorelease_stub];
}

- (void) setMid: (NSString *) mid {
  [mid retain_stub];
  [__mid release_stub];
  __mid = mid;
  __mid_isset = YES;
}

- (BOOL) midIsSet {
  return __mid_isset;
}

- (void) unsetMid {
  [__mid release_stub];
  __mid = nil;
  __mid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Restore_args"];
  if (__mid_isset) {
    if (__mid != nil) {
      [outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __mid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Restore_args("];
  [ms appendString: @"mid:"];
  [ms appendFormat: @"\"%@\"", __mid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface owbRestore_result : NSObject <NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation owbRestore_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            owbOwbOp *_elem7 = [[owbOwbOp alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Restore_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [[__success objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Restore_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation owbdata_providerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_GetOps: (NSString *) mid opid: (int32_t) opid
{
  [outProtocol writeMessageBeginWithName: @"GetOps" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetOps_args"];
  if (mid != nil)  {
    [outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: mid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"opid" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: opid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_GetOps
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  owbGetOps_result * result = [[[owbGetOps_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetOps failed: unknown result"];
}

- (NSMutableArray *) GetOps: (NSString *) mid opid: (int32_t) opid
{
  [self send_GetOps : mid opid: opid];
  return [self recv_GetOps];
}

- (void) send_Restore: (NSString *) mid
{
  [outProtocol writeMessageBeginWithName: @"Restore" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Restore_args"];
  if (mid != nil)  {
    [outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: mid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_Restore
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  owbRestore_result * result = [[[owbRestore_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"Restore failed: unknown result"];
}

- (NSMutableArray *) Restore: (NSString *) mid
{
  [self send_Restore : mid];
  return [self recv_Restore];
}

@end

@implementation owbdata_providerProcessor

- (id) initWithdata_provider: (id <owbdata_provider>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_GetOps_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GetOps"];
  }
  {
    SEL s = @selector(process_Restore_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"Restore"];
  }
  return self;
}

- (id<owbdata_provider>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_GetOps_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  owbGetOps_args * args = [[owbGetOps_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  owbGetOps_result * result = [[owbGetOps_result alloc] init];
  [result setSuccess: [mService GetOps: [args mid] opid: [args opid]]];
  [outProtocol writeMessageBeginWithName: @"GetOps"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_Restore_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  owbRestore_args * args = [[owbRestore_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  owbRestore_result * result = [[owbRestore_result alloc] init];
  [result setSuccess: [mService Restore: [args mid]]];
  [outProtocol writeMessageBeginWithName: @"Restore"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

@interface owbSendOp_args : NSObject <NSCoding> {
owbOwbOp * __op;

BOOL __op_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=op, setter=setOp:) owbOwbOp * op;
#endif

- (id) init;
- (id) initWithOp: (owbOwbOp *) op;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (owbOwbOp *) op;
- (void) setOp: (owbOwbOp *) op;
#endif
- (BOOL) opIsSet;

@end

@implementation owbSendOp_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithOp: (owbOwbOp *) op
{
self = [super init];
__op = [op retain_stub];
__op_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"op"])
{
  __op = [[decoder decodeObjectForKey: @"op"] retain_stub];
  __op_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__op_isset)
{
  [encoder encodeObject: __op forKey: @"op"];
}
}

- (void) dealloc
{
[__op release_stub];
[super dealloc_stub];
}

- (owbOwbOp *) op {
return [[__op retain_stub] autorelease_stub];
}

- (void) setOp: (owbOwbOp *) op {
[op retain_stub];
[__op release_stub];
__op = op;
__op_isset = YES;
}

- (BOOL) opIsSet {
return __op_isset;
}

- (void) unsetOp {
[__op release_stub];
__op = nil;
__op_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        owbOwbOp *fieldValue = [[owbOwbOp alloc] init];
        [fieldValue read: inProtocol];
        [self setOp: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"SendOp_args"];
if (__op_isset) {
  if (__op != nil) {
    [outProtocol writeFieldBeginWithName: @"op" type: TType_STRUCT fieldID: 1];
    [__op write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"SendOp_args("];
[ms appendString: @"op:"];
[ms appendFormat: @"%@", __op];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbSendOp_result : NSObject <NSCoding> {
int32_t __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation owbSendOp_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (int32_t) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [decoder decodeInt32ForKey: @"success"];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeInt32: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) success {
return __success;
}

- (void) setSuccess: (int32_t) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_I32) {
        int32_t fieldValue = [inProtocol readI32];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"SendOp_result"];

if (__success_isset) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
  [outProtocol writeI32: __success];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"SendOp_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation owbdata_updaterClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_SendOp: (owbOwbOp *) op
{
[outProtocol writeMessageBeginWithName: @"SendOp" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"SendOp_args"];
if (op != nil){
  [outProtocol writeFieldBeginWithName: @"op" type: TType_STRUCT fieldID: 1];
  [op write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (int32_t) recv_SendOp
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
owbSendOp_result * result = [[[owbSendOp_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"SendOp failed: unknown result"];
}

- (int32_t) SendOp: (owbOwbOp *) op
{
[self send_SendOp : op];
return [self recv_SendOp];
}

@end

@implementation owbdata_updaterProcessor

- (id) initWithdata_updater: (id <owbdata_updater>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_SendOp_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"SendOp"];
}
return self;
}

- (id<owbdata_updater>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_SendOp_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
owbSendOp_args * args = [[owbSendOp_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
owbSendOp_result * result = [[owbSendOp_result alloc] init];
[result setSuccess: [mService SendOp: [args op]]];
[outProtocol writeMessageBeginWithName: @"SendOp"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface owbTransferAuth_args : NSObject <NSCoding> {
NSString * __hname;
NSString * __mid;

BOOL __hname_isset;
BOOL __mid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=hname, setter=setHname:) NSString * hname;
@property (nonatomic, retain, getter=mid, setter=setMid:) NSString * mid;
#endif

- (id) init;
- (id) initWithHname: (NSString *) hname mid: (NSString *) mid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) hname;
- (void) setHname: (NSString *) hname;
#endif
- (BOOL) hnameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mid;
- (void) setMid: (NSString *) mid;
#endif
- (BOOL) midIsSet;

@end

@implementation owbTransferAuth_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithHname: (NSString *) hname mid: (NSString *) mid
{
self = [super init];
__hname = [hname retain_stub];
__hname_isset = YES;
__mid = [mid retain_stub];
__mid_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"hname"])
{
__hname = [[decoder decodeObjectForKey: @"hname"] retain_stub];
__hname_isset = YES;
}
if ([decoder containsValueForKey: @"mid"])
{
__mid = [[decoder decodeObjectForKey: @"mid"] retain_stub];
__mid_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__hname_isset)
{
[encoder encodeObject: __hname forKey: @"hname"];
}
if (__mid_isset)
{
[encoder encodeObject: __mid forKey: @"mid"];
}
}

- (void) dealloc
{
[__hname release_stub];
[__mid release_stub];
[super dealloc_stub];
}

- (NSString *) hname {
return [[__hname retain_stub] autorelease_stub];
}

- (void) setHname: (NSString *) hname {
[hname retain_stub];
[__hname release_stub];
__hname = hname;
__hname_isset = YES;
}

- (BOOL) hnameIsSet {
return __hname_isset;
}

- (void) unsetHname {
[__hname release_stub];
__hname = nil;
__hname_isset = NO;
}

- (NSString *) mid {
return [[__mid retain_stub] autorelease_stub];
}

- (void) setMid: (NSString *) mid {
[mid retain_stub];
[__mid release_stub];
__mid = mid;
__mid_isset = YES;
}

- (BOOL) midIsSet {
return __mid_isset;
}

- (void) unsetMid {
[__mid release_stub];
__mid = nil;
__mid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 1:
    if (fieldType == TType_STRING) {
      NSString * fieldValue = [inProtocol readString];
      [self setHname: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  case 2:
    if (fieldType == TType_STRING) {
      NSString * fieldValue = [inProtocol readString];
      [self setMid: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"TransferAuth_args"];
if (__hname_isset) {
if (__hname != nil) {
  [outProtocol writeFieldBeginWithName: @"hname" type: TType_STRING fieldID: 1];
  [outProtocol writeString: __hname];
  [outProtocol writeFieldEnd];
}
}
if (__mid_isset) {
if (__mid != nil) {
  [outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 2];
  [outProtocol writeString: __mid];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"TransferAuth_args("];
[ms appendString: @"hname:"];
[ms appendFormat: @"\"%@\"", __hname];
[ms appendString: @",mid:"];
[ms appendFormat: @"\"%@\"", __mid];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbTransferAuth_result : NSObject <NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation owbTransferAuth_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 0:
    if (fieldType == TType_BOOL) {
      BOOL fieldValue = [inProtocol readBool];
      [self setSuccess: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"TransferAuth_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"TransferAuth_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbGetUserList_args : NSObject <NSCoding> {
NSString * __mid;

BOOL __mid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=mid, setter=setMid:) NSString * mid;
#endif

- (id) init;
- (id) initWithMid: (NSString *) mid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) mid;
- (void) setMid: (NSString *) mid;
#endif
- (BOOL) midIsSet;

@end

@implementation owbGetUserList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithMid: (NSString *) mid
{
self = [super init];
__mid = [mid retain_stub];
__mid_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"mid"])
{
__mid = [[decoder decodeObjectForKey: @"mid"] retain_stub];
__mid_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__mid_isset)
{
[encoder encodeObject: __mid forKey: @"mid"];
}
}

- (void) dealloc
{
[__mid release_stub];
[super dealloc_stub];
}

- (NSString *) mid {
return [[__mid retain_stub] autorelease_stub];
}

- (void) setMid: (NSString *) mid {
[mid retain_stub];
[__mid release_stub];
__mid = mid;
__mid_isset = YES;
}

- (BOOL) midIsSet {
return __mid_isset;
}

- (void) unsetMid {
[__mid release_stub];
__mid = nil;
__mid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 1:
    if (fieldType == TType_STRING) {
      NSString * fieldValue = [inProtocol readString];
      [self setMid: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetUserList_args"];
if (__mid_isset) {
if (__mid != nil) {
  [outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 1];
  [outProtocol writeString: __mid];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetUserList_args("];
[ms appendString: @"mid:"];
[ms appendFormat: @"\"%@\"", __mid];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbGetUserList_result : NSObject <NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation owbGetUserList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 0:
    if (fieldType == TType_LIST) {
      int _size10;
      [inProtocol readListBeginReturningElementType: NULL size: &_size10];
      NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
      int _i11;
      for (_i11 = 0; _i11 < _size10; ++_i11)
      {
        owbOwbUser *_elem12 = [[owbOwbUser alloc] init];
        [_elem12 read: inProtocol];
        [fieldValue addObject: _elem12];
        [_elem12 release_stub];
      }
      [inProtocol readListEnd];
      [self setSuccess: fieldValue];
      [fieldValue release_stub];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetUserList_result"];

if (__success_isset) {
if (__success != nil) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
  {
    [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
    int i14;
    for (i14 = 0; i14 < [__success count]; i14++)
    {
      [[__success objectAtIndex: i14] write: outProtocol];
    }
    [outProtocol writeListEnd];
  }
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetUserList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbHeartBeat_args : NSObject <NSCoding> {
owbOwbHbSPack * __pack;

BOOL __pack_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=pack, setter=setPack:) owbOwbHbSPack * pack;
#endif

- (id) init;
- (id) initWithPack: (owbOwbHbSPack *) pack;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (owbOwbHbSPack *) pack;
- (void) setPack: (owbOwbHbSPack *) pack;
#endif
- (BOOL) packIsSet;

@end

@implementation owbHeartBeat_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPack: (owbOwbHbSPack *) pack
{
self = [super init];
__pack = [pack retain_stub];
__pack_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"pack"])
{
__pack = [[decoder decodeObjectForKey: @"pack"] retain_stub];
__pack_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__pack_isset)
{
[encoder encodeObject: __pack forKey: @"pack"];
}
}

- (void) dealloc
{
[__pack release_stub];
[super dealloc_stub];
}

- (owbOwbHbSPack *) pack {
return [[__pack retain_stub] autorelease_stub];
}

- (void) setPack: (owbOwbHbSPack *) pack {
[pack retain_stub];
[__pack release_stub];
__pack = pack;
__pack_isset = YES;
}

- (BOOL) packIsSet {
return __pack_isset;
}

- (void) unsetPack {
[__pack release_stub];
__pack = nil;
__pack_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 1:
    if (fieldType == TType_STRUCT) {
      owbOwbHbSPack *fieldValue = [[owbOwbHbSPack alloc] init];
      [fieldValue read: inProtocol];
      [self setPack: fieldValue];
      [fieldValue release_stub];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"HeartBeat_args"];
if (__pack_isset) {
if (__pack != nil) {
  [outProtocol writeFieldBeginWithName: @"pack" type: TType_STRUCT fieldID: 1];
  [__pack write: outProtocol];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"HeartBeat_args("];
[ms appendString: @"pack:"];
[ms appendFormat: @"%@", __pack];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbHeartBeat_result : NSObject <NSCoding> {
owbOwbHbRPack * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) owbOwbHbRPack * success;
#endif

- (id) init;
- (id) initWithSuccess: (owbOwbHbRPack *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (owbOwbHbRPack *) success;
- (void) setSuccess: (owbOwbHbRPack *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation owbHeartBeat_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (owbOwbHbRPack *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (owbOwbHbRPack *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (owbOwbHbRPack *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 0:
    if (fieldType == TType_STRUCT) {
      owbOwbHbRPack *fieldValue = [[owbOwbHbRPack alloc] init];
      [fieldValue read: inProtocol];
      [self setSuccess: fieldValue];
      [fieldValue release_stub];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"HeartBeat_result"];

if (__success_isset) {
if (__success != nil) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
  [__success write: outProtocol];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"HeartBeat_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation owbmasterClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_TransferAuth: (NSString *) hname mid: (NSString *) mid
{
[outProtocol writeMessageBeginWithName: @"TransferAuth" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"TransferAuth_args"];
if (hname != nil){
[outProtocol writeFieldBeginWithName: @"hname" type: TType_STRING fieldID: 1];
[outProtocol writeString: hname];
[outProtocol writeFieldEnd];
}
if (mid != nil){
[outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 2];
[outProtocol writeString: mid];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_TransferAuth
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
owbTransferAuth_result * result = [[[owbTransferAuth_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"TransferAuth failed: unknown result"];
}

- (BOOL) TransferAuth: (NSString *) hname mid: (NSString *) mid
{
[self send_TransferAuth : hname mid: mid];
return [self recv_TransferAuth];
}

- (void) send_GetUserList: (NSString *) mid
{
[outProtocol writeMessageBeginWithName: @"GetUserList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"GetUserList_args"];
if (mid != nil){
[outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 1];
[outProtocol writeString: mid];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_GetUserList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
owbGetUserList_result * result = [[[owbGetUserList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"GetUserList failed: unknown result"];
}

- (NSMutableArray *) GetUserList: (NSString *) mid
{
[self send_GetUserList : mid];
return [self recv_GetUserList];
}

- (void) send_HeartBeat: (owbOwbHbSPack *) pack
{
[outProtocol writeMessageBeginWithName: @"HeartBeat" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"HeartBeat_args"];
if (pack != nil){
[outProtocol writeFieldBeginWithName: @"pack" type: TType_STRUCT fieldID: 1];
[pack write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (owbOwbHbRPack *) recv_HeartBeat
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
owbHeartBeat_result * result = [[[owbHeartBeat_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"HeartBeat failed: unknown result"];
}

- (owbOwbHbRPack *) HeartBeat: (owbOwbHbSPack *) pack
{
[self send_HeartBeat : pack];
return [self recv_HeartBeat];
}

@end

@implementation owbmasterProcessor

- (id) initWithmaster: (id <owbmaster>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_TransferAuth_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"TransferAuth"];
}
{
SEL s = @selector(process_GetUserList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"GetUserList"];
}
{
SEL s = @selector(process_HeartBeat_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"HeartBeat"];
}
return self;
}

- (id<owbmaster>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_TransferAuth_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
owbTransferAuth_args * args = [[owbTransferAuth_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
owbTransferAuth_result * result = [[owbTransferAuth_result alloc] init];
[result setSuccess: [mService TransferAuth: [args hname] mid: [args mid]]];
[outProtocol writeMessageBeginWithName: @"TransferAuth"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_GetUserList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
owbGetUserList_args * args = [[owbGetUserList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
owbGetUserList_result * result = [[owbGetUserList_result alloc] init];
[result setSuccess: [mService GetUserList: [args mid]]];
[outProtocol writeMessageBeginWithName: @"GetUserList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_HeartBeat_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
owbHeartBeat_args * args = [[owbHeartBeat_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
owbHeartBeat_result * result = [[owbHeartBeat_result alloc] init];
[result setSuccess: [mService HeartBeat: [args pack]]];
[outProtocol writeMessageBeginWithName: @"HeartBeat"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface owbLogin_args : NSObject <NSCoding> {
owbOwbUser * __user;

BOOL __user_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=user, setter=setUser:) owbOwbUser * user;
#endif

- (id) init;
- (id) initWithUser: (owbOwbUser *) user;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (owbOwbUser *) user;
- (void) setUser: (owbOwbUser *) user;
#endif
- (BOOL) userIsSet;

@end

@implementation owbLogin_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithUser: (owbOwbUser *) user
{
self = [super init];
__user = [user retain_stub];
__user_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"user"])
{
__user = [[decoder decodeObjectForKey: @"user"] retain_stub];
__user_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__user_isset)
{
[encoder encodeObject: __user forKey: @"user"];
}
}

- (void) dealloc
{
[__user release_stub];
[super dealloc_stub];
}

- (owbOwbUser *) user {
return [[__user retain_stub] autorelease_stub];
}

- (void) setUser: (owbOwbUser *) user {
[user retain_stub];
[__user release_stub];
__user = user;
__user_isset = YES;
}

- (BOOL) userIsSet {
return __user_isset;
}

- (void) unsetUser {
[__user release_stub];
__user = nil;
__user_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_STRUCT) {
    owbOwbUser *fieldValue = [[owbOwbUser alloc] init];
    [fieldValue read: inProtocol];
    [self setUser: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"Login_args"];
if (__user_isset) {
if (__user != nil) {
[outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 1];
[__user write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"Login_args("];
[ms appendString: @"user:"];
[ms appendFormat: @"%@", __user];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbLogin_result : NSObject <NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation owbLogin_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_BOOL) {
    BOOL fieldValue = [inProtocol readBool];
    [self setSuccess: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"Login_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbJoinMeeting_args : NSObject <NSCoding> {
NSString * __uname;
NSString * __passwd;
NSString * __mid;

BOOL __uname_isset;
BOOL __passwd_isset;
BOOL __mid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uname, setter=setUname:) NSString * uname;
@property (nonatomic, retain, getter=passwd, setter=setPasswd:) NSString * passwd;
@property (nonatomic, retain, getter=mid, setter=setMid:) NSString * mid;
#endif

- (id) init;
- (id) initWithUname: (NSString *) uname passwd: (NSString *) passwd mid: (NSString *) mid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) uname;
- (void) setUname: (NSString *) uname;
#endif
- (BOOL) unameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) passwd;
- (void) setPasswd: (NSString *) passwd;
#endif
- (BOOL) passwdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mid;
- (void) setMid: (NSString *) mid;
#endif
- (BOOL) midIsSet;

@end

@implementation owbJoinMeeting_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithUname: (NSString *) uname passwd: (NSString *) passwd mid: (NSString *) mid
{
self = [super init];
__uname = [uname retain_stub];
__uname_isset = YES;
__passwd = [passwd retain_stub];
__passwd_isset = YES;
__mid = [mid retain_stub];
__mid_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"uname"])
{
__uname = [[decoder decodeObjectForKey: @"uname"] retain_stub];
__uname_isset = YES;
}
if ([decoder containsValueForKey: @"passwd"])
{
__passwd = [[decoder decodeObjectForKey: @"passwd"] retain_stub];
__passwd_isset = YES;
}
if ([decoder containsValueForKey: @"mid"])
{
__mid = [[decoder decodeObjectForKey: @"mid"] retain_stub];
__mid_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__uname_isset)
{
[encoder encodeObject: __uname forKey: @"uname"];
}
if (__passwd_isset)
{
[encoder encodeObject: __passwd forKey: @"passwd"];
}
if (__mid_isset)
{
[encoder encodeObject: __mid forKey: @"mid"];
}
}

- (void) dealloc
{
[__uname release_stub];
[__passwd release_stub];
[__mid release_stub];
[super dealloc_stub];
}

- (NSString *) uname {
return [[__uname retain_stub] autorelease_stub];
}

- (void) setUname: (NSString *) uname {
[uname retain_stub];
[__uname release_stub];
__uname = uname;
__uname_isset = YES;
}

- (BOOL) unameIsSet {
return __uname_isset;
}

- (void) unsetUname {
[__uname release_stub];
__uname = nil;
__uname_isset = NO;
}

- (NSString *) passwd {
return [[__passwd retain_stub] autorelease_stub];
}

- (void) setPasswd: (NSString *) passwd {
[passwd retain_stub];
[__passwd release_stub];
__passwd = passwd;
__passwd_isset = YES;
}

- (BOOL) passwdIsSet {
return __passwd_isset;
}

- (void) unsetPasswd {
[__passwd release_stub];
__passwd = nil;
__passwd_isset = NO;
}

- (NSString *) mid {
return [[__mid retain_stub] autorelease_stub];
}

- (void) setMid: (NSString *) mid {
[mid retain_stub];
[__mid release_stub];
__mid = mid;
__mid_isset = YES;
}

- (BOOL) midIsSet {
return __mid_isset;
}

- (void) unsetMid {
[__mid release_stub];
__mid = nil;
__mid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_STRING) {
    NSString * fieldValue = [inProtocol readString];
    [self setUname: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
case 2:
  if (fieldType == TType_STRING) {
    NSString * fieldValue = [inProtocol readString];
    [self setPasswd: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
case 3:
  if (fieldType == TType_STRING) {
    NSString * fieldValue = [inProtocol readString];
    [self setMid: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"JoinMeeting_args"];
if (__uname_isset) {
if (__uname != nil) {
[outProtocol writeFieldBeginWithName: @"uname" type: TType_STRING fieldID: 1];
[outProtocol writeString: __uname];
[outProtocol writeFieldEnd];
}
}
if (__passwd_isset) {
if (__passwd != nil) {
[outProtocol writeFieldBeginWithName: @"passwd" type: TType_STRING fieldID: 2];
[outProtocol writeString: __passwd];
[outProtocol writeFieldEnd];
}
}
if (__mid_isset) {
if (__mid != nil) {
[outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 3];
[outProtocol writeString: __mid];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"JoinMeeting_args("];
[ms appendString: @"uname:"];
[ms appendFormat: @"\"%@\"", __uname];
[ms appendString: @",passwd:"];
[ms appendFormat: @"\"%@\"", __passwd];
[ms appendString: @",mid:"];
[ms appendFormat: @"\"%@\"", __mid];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbJoinMeeting_result : NSObject <NSCoding> {
owbOwbServerInfo * __success;
owbOwbMissingMeeting * __mmiss;
owbOwbDeadMeeting * __mdead;

BOOL __success_isset;
BOOL __mmiss_isset;
BOOL __mdead_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) owbOwbServerInfo * success;
@property (nonatomic, retain, getter=mmiss, setter=setMmiss:) owbOwbMissingMeeting * mmiss;
@property (nonatomic, retain, getter=mdead, setter=setMdead:) owbOwbDeadMeeting * mdead;
#endif

- (id) init;
- (id) initWithSuccess: (owbOwbServerInfo *) success mmiss: (owbOwbMissingMeeting *) mmiss mdead: (owbOwbDeadMeeting *) mdead;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (owbOwbServerInfo *) success;
- (void) setSuccess: (owbOwbServerInfo *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (owbOwbMissingMeeting *) mmiss;
- (void) setMmiss: (owbOwbMissingMeeting *) mmiss;
#endif
- (BOOL) mmissIsSet;

#if !__has_feature(objc_arc)
- (owbOwbDeadMeeting *) mdead;
- (void) setMdead: (owbOwbDeadMeeting *) mdead;
#endif
- (BOOL) mdeadIsSet;

@end

@implementation owbJoinMeeting_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (owbOwbServerInfo *) success mmiss: (owbOwbMissingMeeting *) mmiss mdead: (owbOwbDeadMeeting *) mdead
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
__mmiss = [mmiss retain_stub];
__mmiss_isset = YES;
__mdead = [mdead retain_stub];
__mdead_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
if ([decoder containsValueForKey: @"mmiss"])
{
__mmiss = [[decoder decodeObjectForKey: @"mmiss"] retain_stub];
__mmiss_isset = YES;
}
if ([decoder containsValueForKey: @"mdead"])
{
__mdead = [[decoder decodeObjectForKey: @"mdead"] retain_stub];
__mdead_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
if (__mmiss_isset)
{
[encoder encodeObject: __mmiss forKey: @"mmiss"];
}
if (__mdead_isset)
{
[encoder encodeObject: __mdead forKey: @"mdead"];
}
}

- (void) dealloc
{
[__success release_stub];
[__mmiss release_stub];
[__mdead release_stub];
[super dealloc_stub];
}

- (owbOwbServerInfo *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (owbOwbServerInfo *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (owbOwbMissingMeeting *) mmiss {
return [[__mmiss retain_stub] autorelease_stub];
}

- (void) setMmiss: (owbOwbMissingMeeting *) mmiss {
[mmiss retain_stub];
[__mmiss release_stub];
__mmiss = mmiss;
__mmiss_isset = YES;
}

- (BOOL) mmissIsSet {
return __mmiss_isset;
}

- (void) unsetMmiss {
[__mmiss release_stub];
__mmiss = nil;
__mmiss_isset = NO;
}

- (owbOwbDeadMeeting *) mdead {
return [[__mdead retain_stub] autorelease_stub];
}

- (void) setMdead: (owbOwbDeadMeeting *) mdead {
[mdead retain_stub];
[__mdead release_stub];
__mdead = mdead;
__mdead_isset = YES;
}

- (BOOL) mdeadIsSet {
return __mdead_isset;
}

- (void) unsetMdead {
[__mdead release_stub];
__mdead = nil;
__mdead_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_STRUCT) {
    owbOwbServerInfo *fieldValue = [[owbOwbServerInfo alloc] init];
    [fieldValue read: inProtocol];
    [self setSuccess: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
case 1:
  if (fieldType == TType_STRUCT) {
    owbOwbMissingMeeting *fieldValue = [[owbOwbMissingMeeting alloc] init];
    [fieldValue read: inProtocol];
    [self setMmiss: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
case 2:
  if (fieldType == TType_STRUCT) {
    owbOwbDeadMeeting *fieldValue = [[owbOwbDeadMeeting alloc] init];
    [fieldValue read: inProtocol];
    [self setMdead: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"JoinMeeting_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
} else if (__mmiss_isset) {
if (__mmiss != nil) {
[outProtocol writeFieldBeginWithName: @"mmiss" type: TType_STRUCT fieldID: 1];
[__mmiss write: outProtocol];
[outProtocol writeFieldEnd];
}
} else if (__mdead_isset) {
if (__mdead != nil) {
[outProtocol writeFieldBeginWithName: @"mdead" type: TType_STRUCT fieldID: 2];
[__mdead write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"JoinMeeting_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @",mmiss:"];
[ms appendFormat: @"%@", __mmiss];
[ms appendString: @",mdead:"];
[ms appendFormat: @"%@", __mdead];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbCreateMeeting_args : NSObject <NSCoding> {
NSString * __uname;

BOOL __uname_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uname, setter=setUname:) NSString * uname;
#endif

- (id) init;
- (id) initWithUname: (NSString *) uname;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) uname;
- (void) setUname: (NSString *) uname;
#endif
- (BOOL) unameIsSet;

@end

@implementation owbCreateMeeting_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithUname: (NSString *) uname
{
self = [super init];
__uname = [uname retain_stub];
__uname_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"uname"])
{
__uname = [[decoder decodeObjectForKey: @"uname"] retain_stub];
__uname_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__uname_isset)
{
[encoder encodeObject: __uname forKey: @"uname"];
}
}

- (void) dealloc
{
[__uname release_stub];
[super dealloc_stub];
}

- (NSString *) uname {
return [[__uname retain_stub] autorelease_stub];
}

- (void) setUname: (NSString *) uname {
[uname retain_stub];
[__uname release_stub];
__uname = uname;
__uname_isset = YES;
}

- (BOOL) unameIsSet {
return __uname_isset;
}

- (void) unsetUname {
[__uname release_stub];
__uname = nil;
__uname_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_STRING) {
    NSString * fieldValue = [inProtocol readString];
    [self setUname: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"CreateMeeting_args"];
if (__uname_isset) {
if (__uname != nil) {
[outProtocol writeFieldBeginWithName: @"uname" type: TType_STRING fieldID: 1];
[outProtocol writeString: __uname];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"CreateMeeting_args("];
[ms appendString: @"uname:"];
[ms appendFormat: @"\"%@\"", __uname];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface owbCreateMeeting_result : NSObject <NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation owbCreateMeeting_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_STRING) {
    NSString * fieldValue = [inProtocol readString];
    [self setSuccess: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"CreateMeeting_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
[outProtocol writeString: __success];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"CreateMeeting_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation owbmanagerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_Login: (owbOwbUser *) user
{
[outProtocol writeMessageBeginWithName: @"Login" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"Login_args"];
if (user != nil){
[outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 1];
[user write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_Login
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
owbLogin_result * result = [[[owbLogin_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"Login failed: unknown result"];
}

- (BOOL) Login: (owbOwbUser *) user
{
[self send_Login : user];
return [self recv_Login];
}

- (void) send_JoinMeeting: (NSString *) uname passwd: (NSString *) passwd mid: (NSString *) mid
{
[outProtocol writeMessageBeginWithName: @"JoinMeeting" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"JoinMeeting_args"];
if (uname != nil){
[outProtocol writeFieldBeginWithName: @"uname" type: TType_STRING fieldID: 1];
[outProtocol writeString: uname];
[outProtocol writeFieldEnd];
}
if (passwd != nil){
[outProtocol writeFieldBeginWithName: @"passwd" type: TType_STRING fieldID: 2];
[outProtocol writeString: passwd];
[outProtocol writeFieldEnd];
}
if (mid != nil){
[outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 3];
[outProtocol writeString: mid];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (owbOwbServerInfo *) recv_JoinMeeting
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
owbJoinMeeting_result * result = [[[owbJoinMeeting_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result mmissIsSet]) {
  @throw [result mmiss];
}
if ([result mdeadIsSet]) {
  @throw [result mdead];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"JoinMeeting failed: unknown result"];
}

- (owbOwbServerInfo *) JoinMeeting: (NSString *) uname passwd: (NSString *) passwd mid: (NSString *) mid
{
[self send_JoinMeeting : uname passwd: passwd mid: mid];
return [self recv_JoinMeeting];
}

- (void) send_CreateMeeting: (NSString *) uname
{
[outProtocol writeMessageBeginWithName: @"CreateMeeting" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"CreateMeeting_args"];
if (uname != nil){
[outProtocol writeFieldBeginWithName: @"uname" type: TType_STRING fieldID: 1];
[outProtocol writeString: uname];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_CreateMeeting
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
owbCreateMeeting_result * result = [[[owbCreateMeeting_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"CreateMeeting failed: unknown result"];
}

- (NSString *) CreateMeeting: (NSString *) uname
{
[self send_CreateMeeting : uname];
return [self recv_CreateMeeting];
}

@end

@implementation owbmanagerProcessor

- (id) initWithmanager: (id <owbmanager>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_Login_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"Login"];
}
{
SEL s = @selector(process_JoinMeeting_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"JoinMeeting"];
}
{
SEL s = @selector(process_CreateMeeting_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"CreateMeeting"];
}
return self;
}

- (id<owbmanager>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_Login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
owbLogin_args * args = [[owbLogin_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
owbLogin_result * result = [[owbLogin_result alloc] init];
[result setSuccess: [mService Login: [args user]]];
[outProtocol writeMessageBeginWithName: @"Login"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_JoinMeeting_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
owbJoinMeeting_args * args = [[owbJoinMeeting_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
owbJoinMeeting_result * result = [[owbJoinMeeting_result alloc] init];
[result setSuccess: [mService JoinMeeting: [args uname] passwd: [args passwd] mid: [args mid]]];
[outProtocol writeMessageBeginWithName: @"JoinMeeting"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_CreateMeeting_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
owbCreateMeeting_args * args = [[owbCreateMeeting_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
owbCreateMeeting_result * result = [[owbCreateMeeting_result alloc] init];
[result setSuccess: [mService CreateMeeting: [args uname]]];
[outProtocol writeMessageBeginWithName: @"CreateMeeting"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

