/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "owbsys.h"

@implementation owbOwbMissingMeeting

- (id) init
{
  return [super initWithName: @"OwbMissingMeeting" reason: @"unknown" userInfo: nil];
}

- (id) initWithDescripe: (NSString *) descripe
{
  self = [self init];
  __descripe = [descripe retain_stub];
  __descripe_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"descripe"])
  {
    __descripe = [[decoder decodeObjectForKey: @"descripe"] retain_stub];
    __descripe_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__descripe_isset)
  {
    [encoder encodeObject: __descripe forKey: @"descripe"];
  }
}

- (void) dealloc
{
  [__descripe release_stub];
  [super dealloc_stub];
}

- (NSString *) descripe {
  return [[__descripe retain_stub] autorelease_stub];
}

- (void) setDescripe: (NSString *) descripe {
  [descripe retain_stub];
  [__descripe release_stub];
  __descripe = descripe;
  __descripe_isset = YES;
}

- (BOOL) descripeIsSet {
  return __descripe_isset;
}

- (void) unsetDescripe {
  [__descripe release_stub];
  __descripe = nil;
  __descripe_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescripe: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbMissingMeeting"];
  if (__descripe_isset) {
    if (__descripe != nil) {
      [outProtocol writeFieldBeginWithName: @"descripe" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __descripe];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbMissingMeeting("];
  [ms appendString: @"descripe:"];
  [ms appendFormat: @"\"%@\"", __descripe];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation owbOwbDeadMeeting

- (id) init
{
  return [super initWithName: @"OwbDeadMeeting" reason: @"unknown" userInfo: nil];
}

- (id) initWithDescripe: (NSString *) descripe
{
  self = [self init];
  __descripe = [descripe retain_stub];
  __descripe_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"descripe"])
  {
    __descripe = [[decoder decodeObjectForKey: @"descripe"] retain_stub];
    __descripe_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__descripe_isset)
  {
    [encoder encodeObject: __descripe forKey: @"descripe"];
  }
}

- (void) dealloc
{
  [__descripe release_stub];
  [super dealloc_stub];
}

- (NSString *) descripe {
  return [[__descripe retain_stub] autorelease_stub];
}

- (void) setDescripe: (NSString *) descripe {
  [descripe retain_stub];
  [__descripe release_stub];
  __descripe = descripe;
  __descripe_isset = YES;
}

- (BOOL) descripeIsSet {
  return __descripe_isset;
}

- (void) unsetDescripe {
  [__descripe release_stub];
  __descripe = nil;
  __descripe_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescripe: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbDeadMeeting"];
  if (__descripe_isset) {
    if (__descripe != nil) {
      [outProtocol writeFieldBeginWithName: @"descripe" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __descripe];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbDeadMeeting("];
  [ms appendString: @"descripe:"];
  [ms appendFormat: @"\"%@\"", __descripe];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation owbOwbServerInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIp: (NSString *) ip master_port: (int32_t) master_port updator_port: (int32_t) updator_port provider_port: (int32_t) provider_port
{
  self = [super init];
  __ip = [ip retain_stub];
  __ip_isset = YES;
  __master_port = master_port;
  __master_port_isset = YES;
  __updator_port = updator_port;
  __updator_port_isset = YES;
  __provider_port = provider_port;
  __provider_port_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ip"])
  {
    __ip = [[decoder decodeObjectForKey: @"ip"] retain_stub];
    __ip_isset = YES;
  }
  if ([decoder containsValueForKey: @"master_port"])
  {
    __master_port = [decoder decodeInt32ForKey: @"master_port"];
    __master_port_isset = YES;
  }
  if ([decoder containsValueForKey: @"updator_port"])
  {
    __updator_port = [decoder decodeInt32ForKey: @"updator_port"];
    __updator_port_isset = YES;
  }
  if ([decoder containsValueForKey: @"provider_port"])
  {
    __provider_port = [decoder decodeInt32ForKey: @"provider_port"];
    __provider_port_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ip_isset)
  {
    [encoder encodeObject: __ip forKey: @"ip"];
  }
  if (__master_port_isset)
  {
    [encoder encodeInt32: __master_port forKey: @"master_port"];
  }
  if (__updator_port_isset)
  {
    [encoder encodeInt32: __updator_port forKey: @"updator_port"];
  }
  if (__provider_port_isset)
  {
    [encoder encodeInt32: __provider_port forKey: @"provider_port"];
  }
}

- (void) dealloc
{
  [__ip release_stub];
  [super dealloc_stub];
}

- (NSString *) ip {
  return [[__ip retain_stub] autorelease_stub];
}

- (void) setIp: (NSString *) ip {
  [ip retain_stub];
  [__ip release_stub];
  __ip = ip;
  __ip_isset = YES;
}

- (BOOL) ipIsSet {
  return __ip_isset;
}

- (void) unsetIp {
  [__ip release_stub];
  __ip = nil;
  __ip_isset = NO;
}

- (int32_t) master_port {
  return __master_port;
}

- (void) setMaster_port: (int32_t) master_port {
  __master_port = master_port;
  __master_port_isset = YES;
}

- (BOOL) master_portIsSet {
  return __master_port_isset;
}

- (void) unsetMaster_port {
  __master_port_isset = NO;
}

- (int32_t) updator_port {
  return __updator_port;
}

- (void) setUpdator_port: (int32_t) updator_port {
  __updator_port = updator_port;
  __updator_port_isset = YES;
}

- (BOOL) updator_portIsSet {
  return __updator_port_isset;
}

- (void) unsetUpdator_port {
  __updator_port_isset = NO;
}

- (int32_t) provider_port {
  return __provider_port;
}

- (void) setProvider_port: (int32_t) provider_port {
  __provider_port = provider_port;
  __provider_port_isset = YES;
}

- (BOOL) provider_portIsSet {
  return __provider_port_isset;
}

- (void) unsetProvider_port {
  __provider_port_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMaster_port: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUpdator_port: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setProvider_port: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbServerInfo"];
  if (__ip_isset) {
    if (__ip != nil) {
      [outProtocol writeFieldBeginWithName: @"ip" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __ip];
      [outProtocol writeFieldEnd];
    }
  }
  if (__master_port_isset) {
    [outProtocol writeFieldBeginWithName: @"master_port" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __master_port];
    [outProtocol writeFieldEnd];
  }
  if (__updator_port_isset) {
    [outProtocol writeFieldBeginWithName: @"updator_port" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __updator_port];
    [outProtocol writeFieldEnd];
  }
  if (__provider_port_isset) {
    [outProtocol writeFieldBeginWithName: @"provider_port" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __provider_port];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbServerInfo("];
  [ms appendString: @"ip:"];
  [ms appendFormat: @"\"%@\"", __ip];
  [ms appendString: @",master_port:"];
  [ms appendFormat: @"%i", __master_port];
  [ms appendString: @",updator_port:"];
  [ms appendFormat: @"%i", __updator_port];
  [ms appendString: @",provider_port:"];
  [ms appendFormat: @"%i", __provider_port];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation owbOwbUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUname: (NSString *) uname passwd: (NSString *) passwd identity: (int) identity
{
  self = [super init];
  __uname = [uname retain_stub];
  __uname_isset = YES;
  __passwd = [passwd retain_stub];
  __passwd_isset = YES;
  __identity = identity;
  __identity_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uname"])
  {
    __uname = [[decoder decodeObjectForKey: @"uname"] retain_stub];
    __uname_isset = YES;
  }
  if ([decoder containsValueForKey: @"passwd"])
  {
    __passwd = [[decoder decodeObjectForKey: @"passwd"] retain_stub];
    __passwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"identity"])
  {
    __identity = [decoder decodeIntForKey: @"identity"];
    __identity_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uname_isset)
  {
    [encoder encodeObject: __uname forKey: @"uname"];
  }
  if (__passwd_isset)
  {
    [encoder encodeObject: __passwd forKey: @"passwd"];
  }
  if (__identity_isset)
  {
    [encoder encodeInt: __identity forKey: @"identity"];
  }
}

- (void) dealloc
{
  [__uname release_stub];
  [__passwd release_stub];
  [super dealloc_stub];
}

- (NSString *) uname {
  return [[__uname retain_stub] autorelease_stub];
}

- (void) setUname: (NSString *) uname {
  [uname retain_stub];
  [__uname release_stub];
  __uname = uname;
  __uname_isset = YES;
}

- (BOOL) unameIsSet {
  return __uname_isset;
}

- (void) unsetUname {
  [__uname release_stub];
  __uname = nil;
  __uname_isset = NO;
}

- (NSString *) passwd {
  return [[__passwd retain_stub] autorelease_stub];
}

- (void) setPasswd: (NSString *) passwd {
  [passwd retain_stub];
  [__passwd release_stub];
  __passwd = passwd;
  __passwd_isset = YES;
}

- (BOOL) passwdIsSet {
  return __passwd_isset;
}

- (void) unsetPasswd {
  [__passwd release_stub];
  __passwd = nil;
  __passwd_isset = NO;
}

- (int) identity {
  return __identity;
}

- (void) setIdentity: (int) identity {
  __identity = identity;
  __identity_isset = YES;
}

- (BOOL) identityIsSet {
  return __identity_isset;
}

- (void) unsetIdentity {
  __identity_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPasswd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setIdentity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbUser"];
  if (__uname_isset) {
    if (__uname != nil) {
      [outProtocol writeFieldBeginWithName: @"uname" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__passwd_isset) {
    if (__passwd != nil) {
      [outProtocol writeFieldBeginWithName: @"passwd" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __passwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__identity_isset) {
    [outProtocol writeFieldBeginWithName: @"identity" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __identity];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbUser("];
  [ms appendString: @"uname:"];
  [ms appendFormat: @"\"%@\"", __uname];
  [ms appendString: @",passwd:"];
  [ms appendFormat: @"\"%@\"", __passwd];
  [ms appendString: @",identity:"];
  [ms appendFormat: @"%i", __identity];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation owbOwbHbSPack

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUname: (NSString *) uname mid: (NSString *) mid
{
  self = [super init];
  __uname = [uname retain_stub];
  __uname_isset = YES;
  __mid = [mid retain_stub];
  __mid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uname"])
  {
    __uname = [[decoder decodeObjectForKey: @"uname"] retain_stub];
    __uname_isset = YES;
  }
  if ([decoder containsValueForKey: @"mid"])
  {
    __mid = [[decoder decodeObjectForKey: @"mid"] retain_stub];
    __mid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uname_isset)
  {
    [encoder encodeObject: __uname forKey: @"uname"];
  }
  if (__mid_isset)
  {
    [encoder encodeObject: __mid forKey: @"mid"];
  }
}

- (void) dealloc
{
  [__uname release_stub];
  [__mid release_stub];
  [super dealloc_stub];
}

- (NSString *) uname {
  return [[__uname retain_stub] autorelease_stub];
}

- (void) setUname: (NSString *) uname {
  [uname retain_stub];
  [__uname release_stub];
  __uname = uname;
  __uname_isset = YES;
}

- (BOOL) unameIsSet {
  return __uname_isset;
}

- (void) unsetUname {
  [__uname release_stub];
  __uname = nil;
  __uname_isset = NO;
}

- (NSString *) mid {
  return [[__mid retain_stub] autorelease_stub];
}

- (void) setMid: (NSString *) mid {
  [mid retain_stub];
  [__mid release_stub];
  __mid = mid;
  __mid_isset = YES;
}

- (BOOL) midIsSet {
  return __mid_isset;
}

- (void) unsetMid {
  [__mid release_stub];
  __mid = nil;
  __mid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbHbSPack"];
  if (__uname_isset) {
    if (__uname != nil) {
      [outProtocol writeFieldBeginWithName: @"uname" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mid_isset) {
    if (__mid != nil) {
      [outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbHbSPack("];
  [ms appendString: @"uname:"];
  [ms appendFormat: @"\"%@\"", __uname];
  [ms appendString: @",mid:"];
  [ms appendFormat: @"\"%@\"", __mid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation owbOwbHbRPack

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIdentity: (int) identity
{
  self = [super init];
  __identity = identity;
  __identity_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"identity"])
  {
    __identity = [decoder decodeIntForKey: @"identity"];
    __identity_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__identity_isset)
  {
    [encoder encodeInt: __identity forKey: @"identity"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) identity {
  return __identity;
}

- (void) setIdentity: (int) identity {
  __identity = identity;
  __identity_isset = YES;
}

- (BOOL) identityIsSet {
  return __identity_isset;
}

- (void) unsetIdentity {
  __identity_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setIdentity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbHbRPack"];
  if (__identity_isset) {
    [outProtocol writeFieldBeginWithName: @"identity" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __identity];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbHbRPack("];
  [ms appendString: @"identity:"];
  [ms appendFormat: @"%i", __identity];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation owbowbsysConstants
+ (void) initialize {
}
@end

