/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "owbop.h"

@implementation owbOwbPoint

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithX: (int32_t) x y: (int32_t) y
{
  self = [super init];
  __x = x;
  __x_isset = YES;
  __y = y;
  __y_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"x"])
  {
    __x = [decoder decodeInt32ForKey: @"x"];
    __x_isset = YES;
  }
  if ([decoder containsValueForKey: @"y"])
  {
    __y = [decoder decodeInt32ForKey: @"y"];
    __y_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__x_isset)
  {
    [encoder encodeInt32: __x forKey: @"x"];
  }
  if (__y_isset)
  {
    [encoder encodeInt32: __y forKey: @"y"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) x {
  return __x;
}

- (void) setX: (int32_t) x {
  __x = x;
  __x_isset = YES;
}

- (BOOL) xIsSet {
  return __x_isset;
}

- (void) unsetX {
  __x_isset = NO;
}

- (int32_t) y {
  return __y;
}

- (void) setY: (int32_t) y {
  __y = y;
  __y_isset = YES;
}

- (BOOL) yIsSet {
  return __y_isset;
}

- (void) unsetY {
  __y_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setX: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setY: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbPoint"];
  if (__x_isset) {
    [outProtocol writeFieldBeginWithName: @"x" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __x];
    [outProtocol writeFieldEnd];
  }
  if (__y_isset) {
    [outProtocol writeFieldBeginWithName: @"y" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __y];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbPoint("];
  [ms appendString: @"x:"];
  [ms appendFormat: @"%i", __x];
  [ms appendString: @",y:"];
  [ms appendFormat: @"%i", __y];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation owbOwbDrawOp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMid_op: (BOOL) mid_op type: (int) type start_point: (owbOwbPoint *) start_point end_point: (owbOwbPoint *) end_point thickness: (int32_t) thickness color: (int32_t) color is_fill: (BOOL) is_fill alpha: (BOOL) alpha status: (BOOL) status
{
  self = [super init];
  __mid_op = mid_op;
  __mid_op_isset = YES;
  __type = type;
  __type_isset = YES;
  __start_point = [start_point retain_stub];
  __start_point_isset = YES;
  __end_point = [end_point retain_stub];
  __end_point_isset = YES;
  __thickness = thickness;
  __thickness_isset = YES;
  __color = color;
  __color_isset = YES;
  __is_fill = is_fill;
  __is_fill_isset = YES;
  __alpha = alpha;
  __alpha_isset = YES;
  __status = status;
  __status_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mid_op"])
  {
    __mid_op = [decoder decodeBoolForKey: @"mid_op"];
    __mid_op_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"start_point"])
  {
    __start_point = [[decoder decodeObjectForKey: @"start_point"] retain_stub];
    __start_point_isset = YES;
  }
  if ([decoder containsValueForKey: @"end_point"])
  {
    __end_point = [[decoder decodeObjectForKey: @"end_point"] retain_stub];
    __end_point_isset = YES;
  }
  if ([decoder containsValueForKey: @"thickness"])
  {
    __thickness = [decoder decodeInt32ForKey: @"thickness"];
    __thickness_isset = YES;
  }
  if ([decoder containsValueForKey: @"color"])
  {
    __color = [decoder decodeInt32ForKey: @"color"];
    __color_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_fill"])
  {
    __is_fill = [decoder decodeBoolForKey: @"is_fill"];
    __is_fill_isset = YES;
  }
  if ([decoder containsValueForKey: @"alpha"])
  {
    __alpha = [decoder decodeBoolForKey: @"alpha"];
    __alpha_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeBoolForKey: @"status"];
    __status_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mid_op_isset)
  {
    [encoder encodeBool: __mid_op forKey: @"mid_op"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__start_point_isset)
  {
    [encoder encodeObject: __start_point forKey: @"start_point"];
  }
  if (__end_point_isset)
  {
    [encoder encodeObject: __end_point forKey: @"end_point"];
  }
  if (__thickness_isset)
  {
    [encoder encodeInt32: __thickness forKey: @"thickness"];
  }
  if (__color_isset)
  {
    [encoder encodeInt32: __color forKey: @"color"];
  }
  if (__is_fill_isset)
  {
    [encoder encodeBool: __is_fill forKey: @"is_fill"];
  }
  if (__alpha_isset)
  {
    [encoder encodeBool: __alpha forKey: @"alpha"];
  }
  if (__status_isset)
  {
    [encoder encodeBool: __status forKey: @"status"];
  }
}

- (void) dealloc
{
  [__start_point release_stub];
  [__end_point release_stub];
  [super dealloc_stub];
}

- (BOOL) mid_op {
  return __mid_op;
}

- (void) setMid_op: (BOOL) mid_op {
  __mid_op = mid_op;
  __mid_op_isset = YES;
}

- (BOOL) mid_opIsSet {
  return __mid_op_isset;
}

- (void) unsetMid_op {
  __mid_op_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (owbOwbPoint *) start_point {
  return [[__start_point retain_stub] autorelease_stub];
}

- (void) setStart_point: (owbOwbPoint *) start_point {
  [start_point retain_stub];
  [__start_point release_stub];
  __start_point = start_point;
  __start_point_isset = YES;
}

- (BOOL) start_pointIsSet {
  return __start_point_isset;
}

- (void) unsetStart_point {
  [__start_point release_stub];
  __start_point = nil;
  __start_point_isset = NO;
}

- (owbOwbPoint *) end_point {
  return [[__end_point retain_stub] autorelease_stub];
}

- (void) setEnd_point: (owbOwbPoint *) end_point {
  [end_point retain_stub];
  [__end_point release_stub];
  __end_point = end_point;
  __end_point_isset = YES;
}

- (BOOL) end_pointIsSet {
  return __end_point_isset;
}

- (void) unsetEnd_point {
  [__end_point release_stub];
  __end_point = nil;
  __end_point_isset = NO;
}

- (int32_t) thickness {
  return __thickness;
}

- (void) setThickness: (int32_t) thickness {
  __thickness = thickness;
  __thickness_isset = YES;
}

- (BOOL) thicknessIsSet {
  return __thickness_isset;
}

- (void) unsetThickness {
  __thickness_isset = NO;
}

- (int32_t) color {
  return __color;
}

- (void) setColor: (int32_t) color {
  __color = color;
  __color_isset = YES;
}

- (BOOL) colorIsSet {
  return __color_isset;
}

- (void) unsetColor {
  __color_isset = NO;
}

- (BOOL) is_fill {
  return __is_fill;
}

- (void) setIs_fill: (BOOL) is_fill {
  __is_fill = is_fill;
  __is_fill_isset = YES;
}

- (BOOL) is_fillIsSet {
  return __is_fill_isset;
}

- (void) unsetIs_fill {
  __is_fill_isset = NO;
}

- (BOOL) alpha {
  return __alpha;
}

- (void) setAlpha: (BOOL) alpha {
  __alpha = alpha;
  __alpha_isset = YES;
}

- (BOOL) alphaIsSet {
  return __alpha_isset;
}

- (void) unsetAlpha {
  __alpha_isset = NO;
}

- (BOOL) status {
  return __status;
}

- (void) setStatus: (BOOL) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setMid_op: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          owbOwbPoint *fieldValue = [[owbOwbPoint alloc] init];
          [fieldValue read: inProtocol];
          [self setStart_point: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          owbOwbPoint *fieldValue = [[owbOwbPoint alloc] init];
          [fieldValue read: inProtocol];
          [self setEnd_point: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setThickness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setColor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_fill: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAlpha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbDrawOp"];
  if (__mid_op_isset) {
    [outProtocol writeFieldBeginWithName: @"mid_op" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __mid_op];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__start_point_isset) {
    if (__start_point != nil) {
      [outProtocol writeFieldBeginWithName: @"start_point" type: TType_STRUCT fieldID: 3];
      [__start_point write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__end_point_isset) {
    if (__end_point != nil) {
      [outProtocol writeFieldBeginWithName: @"end_point" type: TType_STRUCT fieldID: 4];
      [__end_point write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__thickness_isset) {
    [outProtocol writeFieldBeginWithName: @"thickness" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __thickness];
    [outProtocol writeFieldEnd];
  }
  if (__color_isset) {
    [outProtocol writeFieldBeginWithName: @"color" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __color];
    [outProtocol writeFieldEnd];
  }
  if (__is_fill_isset) {
    [outProtocol writeFieldBeginWithName: @"is_fill" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __is_fill];
    [outProtocol writeFieldEnd];
  }
  if (__alpha_isset) {
    [outProtocol writeFieldBeginWithName: @"alpha" type: TType_BOOL fieldID: 8];
    [outProtocol writeBool: __alpha];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __status];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbDrawOp("];
  [ms appendString: @"mid_op:"];
  [ms appendFormat: @"%i", __mid_op];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",start_point:"];
  [ms appendFormat: @"%@", __start_point];
  [ms appendString: @",end_point:"];
  [ms appendFormat: @"%@", __end_point];
  [ms appendString: @",thickness:"];
  [ms appendFormat: @"%i", __thickness];
  [ms appendString: @",color:"];
  [ms appendFormat: @"%i", __color];
  [ms appendString: @",is_fill:"];
  [ms appendFormat: @"%i", __is_fill];
  [ms appendString: @",alpha:"];
  [ms appendFormat: @"%i", __alpha];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation owbOwbSaveOp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSponsor: (NSString *) sponsor time: (NSString *) time notes: (NSString *) notes
{
  self = [super init];
  __sponsor = [sponsor retain_stub];
  __sponsor_isset = YES;
  __time = [time retain_stub];
  __time_isset = YES;
  __notes = [notes retain_stub];
  __notes_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sponsor"])
  {
    __sponsor = [[decoder decodeObjectForKey: @"sponsor"] retain_stub];
    __sponsor_isset = YES;
  }
  if ([decoder containsValueForKey: @"time"])
  {
    __time = [[decoder decodeObjectForKey: @"time"] retain_stub];
    __time_isset = YES;
  }
  if ([decoder containsValueForKey: @"notes"])
  {
    __notes = [[decoder decodeObjectForKey: @"notes"] retain_stub];
    __notes_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sponsor_isset)
  {
    [encoder encodeObject: __sponsor forKey: @"sponsor"];
  }
  if (__time_isset)
  {
    [encoder encodeObject: __time forKey: @"time"];
  }
  if (__notes_isset)
  {
    [encoder encodeObject: __notes forKey: @"notes"];
  }
}

- (void) dealloc
{
  [__sponsor release_stub];
  [__time release_stub];
  [__notes release_stub];
  [super dealloc_stub];
}

- (NSString *) sponsor {
  return [[__sponsor retain_stub] autorelease_stub];
}

- (void) setSponsor: (NSString *) sponsor {
  [sponsor retain_stub];
  [__sponsor release_stub];
  __sponsor = sponsor;
  __sponsor_isset = YES;
}

- (BOOL) sponsorIsSet {
  return __sponsor_isset;
}

- (void) unsetSponsor {
  [__sponsor release_stub];
  __sponsor = nil;
  __sponsor_isset = NO;
}

- (NSString *) time {
  return [[__time retain_stub] autorelease_stub];
}

- (void) setTime: (NSString *) time {
  [time retain_stub];
  [__time release_stub];
  __time = time;
  __time_isset = YES;
}

- (BOOL) timeIsSet {
  return __time_isset;
}

- (void) unsetTime {
  [__time release_stub];
  __time = nil;
  __time_isset = NO;
}

- (NSString *) notes {
  return [[__notes retain_stub] autorelease_stub];
}

- (void) setNotes: (NSString *) notes {
  [notes retain_stub];
  [__notes release_stub];
  __notes = notes;
  __notes_isset = YES;
}

- (BOOL) notesIsSet {
  return __notes_isset;
}

- (void) unsetNotes {
  [__notes release_stub];
  __notes = nil;
  __notes_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSponsor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNotes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbSaveOp"];
  if (__sponsor_isset) {
    if (__sponsor != nil) {
      [outProtocol writeFieldBeginWithName: @"sponsor" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sponsor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_isset) {
    if (__time != nil) {
      [outProtocol writeFieldBeginWithName: @"time" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __time];
      [outProtocol writeFieldEnd];
    }
  }
  if (__notes_isset) {
    if (__notes != nil) {
      [outProtocol writeFieldBeginWithName: @"notes" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __notes];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbSaveOp("];
  [ms appendString: @"sponsor:"];
  [ms appendFormat: @"\"%@\"", __sponsor];
  [ms appendString: @",time:"];
  [ms appendFormat: @"\"%@\"", __time];
  [ms appendString: @",notes:"];
  [ms appendFormat: @"\"%@\"", __notes];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation owbOwbReloadOp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSponsor: (NSString *) sponsor time: (NSString *) time reload_point: (int32_t) reload_point
{
  self = [super init];
  __sponsor = [sponsor retain_stub];
  __sponsor_isset = YES;
  __time = [time retain_stub];
  __time_isset = YES;
  __reload_point = reload_point;
  __reload_point_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sponsor"])
  {
    __sponsor = [[decoder decodeObjectForKey: @"sponsor"] retain_stub];
    __sponsor_isset = YES;
  }
  if ([decoder containsValueForKey: @"time"])
  {
    __time = [[decoder decodeObjectForKey: @"time"] retain_stub];
    __time_isset = YES;
  }
  if ([decoder containsValueForKey: @"reload_point"])
  {
    __reload_point = [decoder decodeInt32ForKey: @"reload_point"];
    __reload_point_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sponsor_isset)
  {
    [encoder encodeObject: __sponsor forKey: @"sponsor"];
  }
  if (__time_isset)
  {
    [encoder encodeObject: __time forKey: @"time"];
  }
  if (__reload_point_isset)
  {
    [encoder encodeInt32: __reload_point forKey: @"reload_point"];
  }
}

- (void) dealloc
{
  [__sponsor release_stub];
  [__time release_stub];
  [super dealloc_stub];
}

- (NSString *) sponsor {
  return [[__sponsor retain_stub] autorelease_stub];
}

- (void) setSponsor: (NSString *) sponsor {
  [sponsor retain_stub];
  [__sponsor release_stub];
  __sponsor = sponsor;
  __sponsor_isset = YES;
}

- (BOOL) sponsorIsSet {
  return __sponsor_isset;
}

- (void) unsetSponsor {
  [__sponsor release_stub];
  __sponsor = nil;
  __sponsor_isset = NO;
}

- (NSString *) time {
  return [[__time retain_stub] autorelease_stub];
}

- (void) setTime: (NSString *) time {
  [time retain_stub];
  [__time release_stub];
  __time = time;
  __time_isset = YES;
}

- (BOOL) timeIsSet {
  return __time_isset;
}

- (void) unsetTime {
  [__time release_stub];
  __time = nil;
  __time_isset = NO;
}

- (int32_t) reload_point {
  return __reload_point;
}

- (void) setReload_point: (int32_t) reload_point {
  __reload_point = reload_point;
  __reload_point_isset = YES;
}

- (BOOL) reload_pointIsSet {
  return __reload_point_isset;
}

- (void) unsetReload_point {
  __reload_point_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSponsor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReload_point: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbReloadOp"];
  if (__sponsor_isset) {
    if (__sponsor != nil) {
      [outProtocol writeFieldBeginWithName: @"sponsor" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sponsor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_isset) {
    if (__time != nil) {
      [outProtocol writeFieldBeginWithName: @"time" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __time];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reload_point_isset) {
    [outProtocol writeFieldBeginWithName: @"reload_point" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __reload_point];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbReloadOp("];
  [ms appendString: @"sponsor:"];
  [ms appendFormat: @"\"%@\"", __sponsor];
  [ms appendString: @",time:"];
  [ms appendFormat: @"\"%@\"", __time];
  [ms appendString: @",reload_point:"];
  [ms appendFormat: @"%i", __reload_point];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation owbOwbOp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOpid: (int32_t) opid type: (int) type draw_op: (owbOwbDrawOp *) draw_op save_op: (owbOwbSaveOp *) save_op reload_op: (owbOwbReloadOp *) reload_op
{
  self = [super init];
  __opid = opid;
  __opid_isset = YES;
  __type = type;
  __type_isset = YES;
  __draw_op = [draw_op retain_stub];
  __draw_op_isset = YES;
  __save_op = [save_op retain_stub];
  __save_op_isset = YES;
  __reload_op = [reload_op retain_stub];
  __reload_op_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"opid"])
  {
    __opid = [decoder decodeInt32ForKey: @"opid"];
    __opid_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"draw_op"])
  {
    __draw_op = [[decoder decodeObjectForKey: @"draw_op"] retain_stub];
    __draw_op_isset = YES;
  }
  if ([decoder containsValueForKey: @"save_op"])
  {
    __save_op = [[decoder decodeObjectForKey: @"save_op"] retain_stub];
    __save_op_isset = YES;
  }
  if ([decoder containsValueForKey: @"reload_op"])
  {
    __reload_op = [[decoder decodeObjectForKey: @"reload_op"] retain_stub];
    __reload_op_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__opid_isset)
  {
    [encoder encodeInt32: __opid forKey: @"opid"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__draw_op_isset)
  {
    [encoder encodeObject: __draw_op forKey: @"draw_op"];
  }
  if (__save_op_isset)
  {
    [encoder encodeObject: __save_op forKey: @"save_op"];
  }
  if (__reload_op_isset)
  {
    [encoder encodeObject: __reload_op forKey: @"reload_op"];
  }
}

- (void) dealloc
{
  [__draw_op release_stub];
  [__save_op release_stub];
  [__reload_op release_stub];
  [super dealloc_stub];
}

- (int32_t) opid {
  return __opid;
}

- (void) setOpid: (int32_t) opid {
  __opid = opid;
  __opid_isset = YES;
}

- (BOOL) opidIsSet {
  return __opid_isset;
}

- (void) unsetOpid {
  __opid_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (owbOwbDrawOp *) draw_op {
  return [[__draw_op retain_stub] autorelease_stub];
}

- (void) setDraw_op: (owbOwbDrawOp *) draw_op {
  [draw_op retain_stub];
  [__draw_op release_stub];
  __draw_op = draw_op;
  __draw_op_isset = YES;
}

- (BOOL) draw_opIsSet {
  return __draw_op_isset;
}

- (void) unsetDraw_op {
  [__draw_op release_stub];
  __draw_op = nil;
  __draw_op_isset = NO;
}

- (owbOwbSaveOp *) save_op {
  return [[__save_op retain_stub] autorelease_stub];
}

- (void) setSave_op: (owbOwbSaveOp *) save_op {
  [save_op retain_stub];
  [__save_op release_stub];
  __save_op = save_op;
  __save_op_isset = YES;
}

- (BOOL) save_opIsSet {
  return __save_op_isset;
}

- (void) unsetSave_op {
  [__save_op release_stub];
  __save_op = nil;
  __save_op_isset = NO;
}

- (owbOwbReloadOp *) reload_op {
  return [[__reload_op retain_stub] autorelease_stub];
}

- (void) setReload_op: (owbOwbReloadOp *) reload_op {
  [reload_op retain_stub];
  [__reload_op release_stub];
  __reload_op = reload_op;
  __reload_op_isset = YES;
}

- (BOOL) reload_opIsSet {
  return __reload_op_isset;
}

- (void) unsetReload_op {
  [__reload_op release_stub];
  __reload_op = nil;
  __reload_op_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOpid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          owbOwbDrawOp *fieldValue = [[owbOwbDrawOp alloc] init];
          [fieldValue read: inProtocol];
          [self setDraw_op: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          owbOwbSaveOp *fieldValue = [[owbOwbSaveOp alloc] init];
          [fieldValue read: inProtocol];
          [self setSave_op: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          owbOwbReloadOp *fieldValue = [[owbOwbReloadOp alloc] init];
          [fieldValue read: inProtocol];
          [self setReload_op: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwbOp"];
  if (__opid_isset) {
    [outProtocol writeFieldBeginWithName: @"opid" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __opid];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__draw_op_isset) {
    if (__draw_op != nil) {
      [outProtocol writeFieldBeginWithName: @"draw_op" type: TType_STRUCT fieldID: 3];
      [__draw_op write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__save_op_isset) {
    if (__save_op != nil) {
      [outProtocol writeFieldBeginWithName: @"save_op" type: TType_STRUCT fieldID: 4];
      [__save_op write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reload_op_isset) {
    if (__reload_op != nil) {
      [outProtocol writeFieldBeginWithName: @"reload_op" type: TType_STRUCT fieldID: 5];
      [__reload_op write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OwbOp("];
  [ms appendString: @"opid:"];
  [ms appendFormat: @"%i", __opid];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",draw_op:"];
  [ms appendFormat: @"%@", __draw_op];
  [ms appendString: @",save_op:"];
  [ms appendFormat: @"%@", __save_op];
  [ms appendString: @",reload_op:"];
  [ms appendFormat: @"%@", __reload_op];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation owbowbopConstants
+ (void) initialize {
}
@end

